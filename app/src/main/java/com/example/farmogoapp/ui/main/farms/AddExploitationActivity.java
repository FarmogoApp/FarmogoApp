package com.example.farmogoapp.ui.main.farms;

import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.se.omapi.Session;
import android.text.InputType;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import com.example.farmogoapp.R;
import com.example.farmogoapp.io.FarmogoApiJacksonAdapter;
import com.example.farmogoapp.io.LoadDataActivity;
import com.example.farmogoapp.io.SessionData;
import com.example.farmogoapp.model.Building;
import com.example.farmogoapp.model.Division;
import com.example.farmogoapp.model.Farm;
import com.example.farmogoapp.ui.main.login.LoginActivity;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class AddExploitationActivity extends AppCompatActivity {

    private Spinner spinnerFarms;
    private Spinner spinnerBuild;
    private Spinner spinnerSection;
    private Building actualBuilding;
    private TextView txtFarm;
    private TextView txtBuild;
    private TextView txtSection;
    private Button btnBuild;
    private Button btnSection;
    private Division actualDivision;


    private LinearLayout ll;
    private Button btnAddExplotation;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.edit_farms);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        registerViews();
        registerListeners();
        loadFarms();
    }


    private void loadFarms() {
        final Call<ArrayList<Farm>> farm = FarmogoApiJacksonAdapter.getApiService().getFarms();
        farm.enqueue(new Callback<ArrayList<Farm>>() {
            @Override
            public void onResponse(Call<ArrayList<Farm>> call, Response<ArrayList<Farm>> response) {
                if (response.isSuccessful()) {
                    ArrayList<Farm> farm = response.body();
                    ArrayAdapter farmAdapter = null;
                    SessionData.getInstance().setFarms(farm);
                    List farms = SessionData.getInstance().getFarms();
                    farmAdapter = new ArrayAdapter(AddExploitationActivity.this, R.layout.spinner, farms);
                    spinnerFarms = (Spinner) findViewById(R.id.spinnerFarms);

                    int index =0;
                    int pos=0;
                    for (Farm farm1 : farm) {
                        if(farm1.getUuid().equals(SessionData.getInstance().getActualFarm().getUuid())){
                            index = pos;
                            SessionData.getInstance().setActualFarm(farm1);
                        }
                        pos ++;
                    }

                    spinnerFarms.setAdapter(farmAdapter);
                    spinnerFarms.setSelection(index);


                    if (SessionData.getInstance().getActualFarm() == null) {
                        SessionData.getInstance().setActualFarm(SessionData.getInstance().getFarms().get(0));
                    }
                    loadBuild();

                }
            }

            @Override
            public void onFailure(Call<ArrayList<Farm>> call, Throwable t) {
            }
        });
    }

    private void loadBuild(){
        ArrayAdapter buildAdapter = null;
        buildAdapter = new ArrayAdapter(AddExploitationActivity.this, R.layout.spinner, SessionData.getInstance().getActualFarm().getBuildings());
        spinnerBuild = (Spinner) findViewById(R.id.spinnerBuild);
        if(actualBuilding==null){
            actualBuilding = SessionData.getInstance().getActualFarm().getBuildings().get(0);
        }
        int index =0;
        int pos=0;
        ArrayList<Building> building = (ArrayList<Building>) SessionData.getInstance().getActualFarm().getBuildings();
        for (Building building1 : building) {
            if(building1.getUuid().equals(actualBuilding.getUuid())){
                index = pos;
            }
            pos++;
        }
        spinnerBuild.setAdapter(buildAdapter);
        spinnerBuild.setSelection(index);

        updateTxtBuilding();
        loadSection();
    }

    private void loadSection(){
        ArrayAdapter sectionAdapter = null;
        sectionAdapter = new ArrayAdapter(AddExploitationActivity.this, R.layout.spinner, actualBuilding.getDivisions());
        spinnerSection = (Spinner) findViewById(R.id.spinnerSection);
        if(actualDivision==null){
            actualDivision = actualBuilding.getDivisions().get(0);
        }
        spinnerSection.setAdapter(sectionAdapter);
        int index = actualBuilding.getDivisions().indexOf(actualDivision);

        if(index == -1){
            spinnerSection.setSelection(actualBuilding.getDivisions().size()-1);
        }else{
            spinnerSection.setSelection(index);
        }
        spinnerSection.setSelection(index);
        updateTxtSection();
    }

    private int getPositionOnSpinner(Farm farms){
        return 1;
    }

    private void updateTxtBuilding(){
        txtBuild.setText(actualBuilding.getName());
        btnBuild.setText("Add New Building on : " + SessionData.getInstance().getActualFarm().getName());
    }
    private void updateTxtSection(){
        txtSection.setText(actualDivision.getName());
        btnSection.setText("Add New Division on : " + actualBuilding.getName());
    }

    @Override
    public boolean onSupportNavigateUp() {
        this.finish();
        return super.onSupportNavigateUp();
    }


    private void registerListeners() {

        spinnerFarms.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                SessionData.getInstance().setActualFarm((Farm) parent.getItemAtPosition(position));
                loadBuild();
            }
            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }

        });

        spinnerBuild.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                actualBuilding = (Building) parent.getItemAtPosition(position);
                updateTxtBuilding();
                loadSection();

            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }

        });

        spinnerSection.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                actualDivision = (Division) parent.getItemAtPosition(position);
                updateTxtSection();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

    }

    private void registerViews(){
        spinnerFarms = findViewById(R.id.spinnerFarms);
        spinnerBuild= findViewById(R.id.spinnerBuild);
        spinnerSection= findViewById(R.id.spinnerSection);
        txtBuild = findViewById(R.id.txtBuilding);
        txtSection = findViewById(R.id.txtSection);
        btnBuild = findViewById(R.id.addNewBuilding);
        btnSection = findViewById(R.id.addNewSection);

    }

    public void newFarm(View view) {
        Intent intent = new Intent(AddExploitationActivity.this, NewFarm.class);
        startActivity(intent);
    }

    public void editFarm(View view) {
        Farm editFarm = (Farm) spinnerFarms.getSelectedItem();
        final EditText input = new EditText(AddExploitationActivity.this);
        input.setText(editFarm.getName());
        Farm finalEditFarm = editFarm;
        new AlertDialog.Builder(this)
                .setTitle("Edit: " + editFarm.getName())
                .setMessage("You are editing the name of the farm")
                .setView(input)
                .setPositiveButton("Accept", (dialog, whichButton) -> {
                    String nameFarm = input.getText().toString();
                    finalEditFarm.setName(nameFarm);
                    SessionData.getInstance().setActualFarm(finalEditFarm);
                    saveFarm(finalEditFarm);
                })
                .setNegativeButton("Cancel", (dialog, whichButton) -> {
                })
                .show();

    }
    private void saveFarm(Farm farm){
        Call<Farm> call = FarmogoApiJacksonAdapter.getApiService().createFarm(farm);
        call.enqueue(new Callback<Farm>() {
            @Override
            public void onResponse(Call<Farm> call, Response<Farm> response) {
                Log.e("aaaaaaaaaaaa", response.body().toString());
                loadFarms();
            }
            @Override
            public void onFailure(Call<Farm> call, Throwable t) {

            }
        });
    }


    public void editBuilding(View view) {
        Building editBuild = (Building) spinnerBuild.getSelectedItem();
        final EditText input = new EditText(AddExploitationActivity.this);
        Farm editFarm = (Farm) spinnerFarms.getSelectedItem();

        ArrayList<Building> newBuild = new ArrayList<>();
        for (Building building : editFarm.getBuildings()) {
            if(!building.getUuid().equals(editBuild.getUuid())){
                newBuild.add(building);
            }
        }

        input.setText(editBuild.getName());
        new AlertDialog.Builder(this)
                .setTitle("Edit: " + actualBuilding.getName())
                .setMessage("You are editing the name of the building")
                .setView(input)
                .setPositiveButton("Accept", (dialog, whichButton) -> {
                    String nameBuilding = input.getText().toString();
                    editBuild.setName(nameBuilding);
                    newBuild.add(editBuild);
                    actualBuilding = editBuild;
                    editFarm.setBuildings(newBuild);
                    saveFarm(editFarm);
                })
                .setNegativeButton("Cancel", (dialog, whichButton) -> {
                })
                .show();

    }

    public void editDivision(View view) {
        Division editDivision= (Division) spinnerSection.getSelectedItem();
        final EditText input = new EditText(AddExploitationActivity.this);
        Farm editFarm = (Farm) spinnerFarms.getSelectedItem();

        ArrayList<Division> newDivision = new ArrayList<>();


        for (Division division : actualBuilding.getDivisions()) {
            if(!division.getUuid().equals(editDivision.getUuid())){
                newDivision.add(division);
            }
        }

        ArrayList<Building> newBuild = new ArrayList<>();
        for (Building building : editFarm.getBuildings()) {
            if(!building.getUuid().equals(actualBuilding.getUuid())){
                newBuild.add(building);
            }
        }


        input.setText(editDivision.getName());
        new AlertDialog.Builder(this)
                .setTitle("Edit: " + actualBuilding.getName())
                .setMessage("You are editing the name of the building")
                .setView(input)
                .setPositiveButton("Accept", (dialog, whichButton) -> {
                    String nameDivision = input.getText().toString();
                    editDivision.setName(nameDivision);
                    newDivision.add(editDivision);
                    actualDivision = editDivision;
                    actualBuilding.setDivisions(newDivision);
                    newBuild.add(actualBuilding);
                    editFarm.setBuildings(newBuild);
                    saveFarm(editFarm);
                })
                .setNegativeButton("Cancel", (dialog, whichButton) -> {
                })
                .show();

    }

    public void newBuiling(View view) {
        final EditText input = new EditText(AddExploitationActivity.this);
        Farm editFarm = (Farm) spinnerFarms.getSelectedItem();
        Building newBuildName = new Building();

        ArrayList<Building> newBuild = new ArrayList<>();
        newBuild.addAll(editFarm.getBuildings());
        new AlertDialog.Builder(this)
                .setTitle("New Building")
                .setMessage("You are creating new building")
                .setView(input)
                .setPositiveButton("Accept", (dialog, whichButton) -> {
                    String nameBuilding = input.getText().toString();
                    newBuildName.setName(nameBuilding);
                    newBuild.add(newBuildName);

                    List<Division> listDivisions = new ArrayList<Division>();
                    Division division = new Division();
                    division.setName("Default");
                    listDivisions.add(division);
                    newBuildName.setDivisions(listDivisions);
                    actualDivision = division;
                    actualBuilding = newBuildName;
                    editFarm.setBuildings(newBuild);
                    saveFarm(editFarm);
                })
                .setNegativeButton("Cancel", (dialog, whichButton) -> {
                })
                .show();
    }

    public void newDivision(View view) {
        final EditText input = new EditText(AddExploitationActivity.this);
        Farm editFarm = (Farm) spinnerFarms.getSelectedItem();

        ArrayList<Division> newDivision = new ArrayList<>();
        newDivision.addAll(actualBuilding.getDivisions());

        ArrayList<Building> newBuild = new ArrayList<>();
        Building editBuilding = actualBuilding;
        for (Building building : editFarm.getBuildings()) {
            if(!building.getUuid().equals(actualBuilding.getUuid())){
                newBuild.add(building);
            }
        }

        Division newDivisionName = new Division();

        new AlertDialog.Builder(this)
                .setTitle("New Division")
                .setMessage("You are creating new division")
                .setView(input)
                .setPositiveButton("Accept", (dialog, whichButton) -> {
                    String nameDivision = input.getText().toString();
                    newDivisionName.setName(nameDivision);
                    newDivision.add(newDivisionName);
                    actualDivision = newDivisionName;
                    actualBuilding.setDivisions(newDivision);
                    actualBuilding = editBuilding;

                    newBuild.add(actualBuilding);
                    editFarm.setBuildings(newBuild);
                    saveFarm(editFarm);
                })
                .setNegativeButton("Cancel", (dialog, whichButton) -> {
                })
                .show();
    }

    @Override
    protected void onResume() {
        super.onResume();
        //loadFarms();
    }
}
